/*
 *	    ____  ____  _____   ____________
 *	   / __ / __ /  _/ | / /_  __/ __
 *	  / /_/ / /_/ // //  |/ / / / / /_/ /
 *	 / ____/ _, _// // /|  / / / / _, _/
 *	/_/   /_/ |_/___/_/ |_/ /_/ /_/ |_|
 *
 *	Copyright Printr B.V. All rights reserved.
 *	This code is closed source and should under
 *	nu circumstances be copied or used in other
 *	applications than for Printr B.V.
 *
 */

var request = require('request');

function Auth( formide ) {
	this.formide = formide;
}

Auth.prototype.getRedirectURI = function() {
	var redirectURI = this.formide.config.authUrl + '/authorise';
	redirectURI += '?client_id=' + this.formide.config.apiKey;
	redirectURI += '&redirect_uri=' + this.formide.config.redirectURI;
	redirectURI += '&response_type=code';
	return redirectURI;
};

Auth.prototype.authorize = function(tempCode, next) {
	request.post({
		headers: {
			'content-type' : 'application/x-www-form-urlencoded'
		},
		url: this.formide.config.authUrl + '/token',
		strictSSL: false,
		form: {
			grant_type: 'authorization_code',
			code: tempCode,
			client_id: this.formide.config.apiKey,
			client_secret: this.formide.config.apiSecret,
			redirect_uri: this.formide.config.redirectURI
		}
	}, function( error, response, body ) {
		if(error) return next(JSON.parse(error));
		return next(null, JSON.parse(body));
	}.bind(this));
};

Auth.prototype.refresh = function(refresh_token, next) {
	request.post({
		headers: {
			'content-type': 'application/x-www-form-urlencoded'
		},
		url: this.formide.config.authUrl + '/token',
		strictSSL: false,
		form: {
			grant_type: 'refresh_token',
			refresh_token: refresh_token,
			client_id: this.formide.config.apiKey,
			client_secret: this.formide.config.apiSecret
		}
	}, function( error, response, body ) {
		if(error) return next(JSON.parse(error));
		return next(null, JSON.parse(body));
	}.bind(this));
};

module.exports = Auth;